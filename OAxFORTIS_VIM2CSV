'''
Author: Mackenzie Carlson
Created: 7/8/2024
Last Updated: 7/9/2024
Most Recent Update:

PUT ME IN THE SAME DIRECTORY AS THE ONE USED FOR rsync!
It is best to have the folder this resides in sit inside the same folder that your OAxFORTIS_datacollect.py generated folders.

Do not run this code more than once for the same set of downloaded files - this will write duplicate data onto the output files.



INSTRUCTIONS: run as you would any other python script from the command line with no additional arguments
              
OUTPUT: 3 new csv files with the same format as generated by OAxFORTIS_datacollect.py. They are saved to either a folder with
        today's date or titled "UnknownDate".
        
        The 3 VIM downloaded csv files with be renamed to add "processed" at the end, such as 0_data-1processed.csv.

        OPTIONAL!! If you opt in, 3 Windows will pop up with the following figures:
        (1) XY 2D histograms for each order with y-axis count projections
        (2) Enlarged and scaled projections for each other
        (3) Instantaneous count rate plot and pulse height histogram
        Once these windows are closed, an image of the each window will be saved with filename FORTISplots<1,2,3>_VIM#<number>.png
        with number being the selected file number downloaded from the VIM.
'''

import os
import sys
import numpy as np
import time
import datetime
import csv
import matplotlib.pyplot as plt
import matplotlib
from matplotlib import colors
import matplotlib.gridspec as gridspec
matplotlib.rcParams.update({'font.size': 8})
class color: #because why not
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'



filenum = input(color.BOLD + "Enter File # (as in 0_data-#.csv): " + color.END)



## ---- Set Output Folder ---- ##
prompt1=input(color.BOLD + 'Was this data taken today? (y/n): ' + color.END).lower()
if prompt1 == 'yes' or prompt1 == 'y':
    print('Processed files will be in todays date folder')
    foldername = datetime.date.today()
    folder = "../{}".format(foldername)
    if not os.path.isdir(folder):
        os.makedirs(folder)
elif prompt1 == 'no'or prompt1 == 'n':
    print('Processed files will be in "UnknownDate" folder')
    foldername = 'UnknownDate'
    folder = "../{}".format(foldername)
    if not os.path.isdir(folder):
        os.makedirs(folder)
else:
   print('Huh?') #an answer that wouldn't be yes or no




######################################################################################
##### ---- Select and Read in Files, Decode & Sort Data, and Write to Files  ---- ####
######################################################################################
with open("../{}/Zero_VIM#{}.csv".format(foldername,filenum),"a") as f0, open("../{}/Neg1_VIM#{}.csv".format(foldername,filenum),"a") as fn1, open("../{}/Pos1_VIM#{}.csv".format(foldername,filenum),"a") as fp1:

    ###### ---- ZERO ORDER ---- ######
    ZeroFile = './tdc_0/0_data-{}.csv'.format(filenum)
    if os.path.getsize(ZeroFile) > 0:  #check if file has any data
        Zero = np.genfromtxt(ZeroFile, dtype='str', delimiter='\t')

        t0 = float(Zero[0][1])
        for row in Zero:
            data = np.fromstring(row[2][1:-1], dtype=int, sep=',')

            n = data[0] # Number of events/photons in each packet
            num_photons = np.repeat(data[0],n)
            packetnum = np.repeat(data[1],n)
            t = float(row[1]) - t0 #start timestamp at 0 seconds
            times = np.repeat(t,n)
            X = np.asarray(data[3::3])
            Y = np.asarray(data[4::3])
            P = np.asarray(data[5::3])
            
            if n>1:
                # only want real events and no duplicate events
                X = X[:n]
                Y = Y[:n]
                P = P[:n]

                writer = csv.writer(f0, delimiter=',')
                writer.writerows(zip(packetnum,times,X,Y,P,num_photons))
            else: pass


    ###### ---- +1 ORDER ---- ######
    Pos1File = './tdc_1/1_data-{}.csv'.format(filenum)
    if os.path.getsize(Pos1File) > 0:
        Pos1 = np.genfromtxt(Pos1File, delimiter='\t', dtype='str')
        
        #t0 = float(Pos1[0][1])
        for row in Pos1:
            data = np.fromstring(row[2][1:-1], dtype=int, sep=',')
            n = data[0]
            num_photons = np.repeat(data[0],n)
            packetnum = np.repeat(data[1],n)
            t = float(row[1]) - t0
            times = np.repeat(t,n)
            X = np.asarray(data[3::3])
            Y = np.asarray(data[4::3])
            P = np.asarray(data[5::3])
            
            if n>1:
                X = X[:n]
                Y = Y[:n]
                P = P[:n]
                
                writer = csv.writer(fp1, delimiter=',')
                writer.writerows(zip(packetnum,times,X,Y,P,num_photons))
            else: pass
           
           
    ###### ---- -1 ORDER ---- ######
    Neg1File = './tdc_2/2_data-{}.csv'.format(filenum)
    if os.path.getsize(Neg1File) > 0:
        Neg1 = np.genfromtxt(Neg1File, delimiter='\t', dtype='str')
        
        #t0 = float(Neg1[0][1])
        for row in Neg1:
            data = np.fromstring(row[2][1:-1], dtype=int, sep=',')

            n = data[0]
            num_photons = np.repeat(data[0],n)
            packetnum = np.repeat(data[1],n)
            t = float(row[1]) - t0
            times = np.repeat(t,n)
            X = np.asarray(data[3::3])
            Y = np.asarray(data[4::3])
            P = np.asarray(data[5::3])
            
            if n>1:
                X = X[:n]
                Y = Y[:n]
                P = P[:n]
                
                writer = csv.writer(fn1, delimiter=',')
                writer.writerows(zip(packetnum,times,X,Y,P,num_photons))
            else: pass



##### ---- Rename Files ---- #####
os.rename('./tdc_0/0_data-{}.csv'.format(filenum),'./tdc_0/0_data-{}processed.csv'.format(filenum))
os.rename('./tdc_1/1_data-{}.csv'.format(filenum),'./tdc_1/1_data-{}processed.csv'.format(filenum))
os.rename('./tdc_2/2_data-{}.csv'.format(filenum),'./tdc_2/2_data-{}processed.csv'.format(filenum))








######################################################################################
######################## ---- Optional Plot Generation  ---- #########################
######################################################################################
prompt2=input(color.BOLD + 'Done! Would you like to generate plots? (y/n): ' + color.END).lower()
if prompt2 == 'yes' or prompt2 == 'y':
    
    os.chdir('../{}'.format(foldername)) #enter correct data folder
    
    ################### ---- Read in generated CSVs ---- #########################
    data0 = []       # packet data (each row contain x coordinate, y coordinate, pulse height)
    ZeroFile = "./Zero_VIM#{}.csv".format(filenum)
    if os.path.getsize(ZeroFile) > 0:  #check if file has any data
        Zero = np.loadtxt(ZeroFile, delimiter=',')
        for row in Zero:
            if int(row[4]) != 0:    #pulse height constraints
                data0.append([int(row[2]),int(row[3]),int(row[4])]) #X,Y,P
        data0 = np.asarray(data0)
        Times = Zero.T[1] # Packet Time Stamp
        Time0 = Times[np.insert(np.diff(Times).astype(bool), 0, True)] #skip duplicates
        Time0b = np.insert(Time0, 0, 0., axis=0) #array of previous times, add zero to beginning to offset time stamp array
        Time0b = np.delete(Time0b,-1)
        Counts0 = Zero.T[5] # Num Photons in each Packet
        Counts0 = Counts0[np.insert(np.diff(Times).astype(bool), 0, True)]
        packnum0 = Zero.T[0]
        packnum0 = packnum0[np.insert(np.diff(Times).astype(bool), 0, True)]

    datap1 = []
    Pos1File = "./Pos1_VIM#{}.csv".format(filenum)
    if os.path.getsize(Pos1File) > 0:
        Pos1 = np.loadtxt(Pos1File, delimiter=',')
        for row in Pos1:
            if int(row[4]) != 0:
                datap1.append([int(row[2]),int(row[3]),int(row[4])])
        datap1 = np.asarray(datap1)
        Times = Pos1.T[1]
        Timep1 = Times[np.insert(np.diff(Times).astype(bool), 0, True)]
        Timep1b = np.insert(Timep1, 0, 0., axis=0)
        Timep1b = np.delete(Timep1b,-1)
        Countsp1 = Pos1.T[5]
        Countsp1 = Countsp1[np.insert(np.diff(Times).astype(bool), 0, True)]
        packnump1 = Pos1.T[0]
        packnump1 = packnump1[np.insert(np.diff(Times).astype(bool), 0, True)]

    datan1 = []
    Neg1File = "./Neg1_VIM#{}.csv".format(filenum)
    if os.path.getsize(Neg1File) > 0:
        Neg1 = np.loadtxt(Neg1File, delimiter=',')
        for row in Neg1:
            if int(row[4]) != 0:
                datan1.append([int(row[2]),int(row[3]),int(row[4])])
        datan1 = np.asarray(datan1)
        Times = Neg1.T[1]
        Timen1 = Times[np.insert(np.diff(Times).astype(bool), 0, True)]
        Timen1b = np.insert(Timen1, 0, 0., axis=0)
        Timen1b = np.delete(Timen1b,-1)
        Countsn1 = Neg1.T[5]
        Countsn1 = Countsn1[np.insert(np.diff(Times).astype(bool), 0, True)]
        packnumn1 = Neg1.T[0]
        packnumn1 = packnumn1[np.insert(np.diff(Times).astype(bool), 0, True)]

    ###################### --- SET UP FIGURES --- ############################
    ## Window 3: Count rate plots & pulse height distributions
    fig3, [CR,PH] = plt.subplots(2,figsize=(15,7.5))
    fig3.suptitle("{}_VIM#{}".format(foldername,filenum))

    ## Window 2: Enlarged & scaled projections
    fig2, prjs = plt.subplots(3,figsize=(15,7.5)) #prjs[0] is +1, prjs[1] is 0, prjs[2] is -1
    fig2.suptitle("{}_VIM#{}".format(foldername,filenum) + ' Projections')

    ## Window 1: XY 2D histograms & projections
    asp = 63.5/43
    nasp = asp-1
    gs_kw = dict(width_ratios=[asp,1,asp], height_ratios=[1,1])
    fig1, ((XYn1, XY0, XYp1),(Projn1, Proj0, Projp1)) = plt.subplots(nrows=2, ncols=3, gridspec_kw=gs_kw, figsize=(15,7.5))
    fig1.subplots_adjust(hspace=.075,wspace=0)
    
    ################# --- 2D Hist Plots of X,Y points --- #######################
    fullrange = [[-10,16400],[-10,16400]]
    fullextent = [-10,16400,-10,16400]

    if len(data0)>0:
        ## Zero Order 2D Histogram
        init0,_,_ = np.histogram2d(data0.T[0], data0.T[1], bins=[355,355], density=True, range=fullrange)#[[2400,12600],[1850,12050]]) #range=[[1750,13250],[1500,13000]]
        XY0.imshow(init0.T, interpolation='nearest', origin='lower', aspect='auto', cmap='magma', norm = colors.LogNorm(), extent=fullextent)#[2400,12600,1850,12050])
        XY0.set_title('Zero Order')
        XY0.set_xlabel('X')
        
        ## Small Projection
        n, bins, _ = Proj0.hist(data0.T[0], 1000, range=[2400,12600], color='black', histtype='step') #range=[1750,13250]
        Proj0.set_xlim(2400,12600)

        ## Large Projection
        n, bins, _ = prjs[1].hist(data0.T[0], 1500, range=[2400,12600], color='darkorange', histtype='step',label='Zero Order')
        #prjs[1].set_yscale('log')
        #prjs[1].set_ylim(0,1000)
        prjs[1].set_xlim(2400,12600)
        prjs[1].legend()
        prjs[1].set_ylabel('Projected Counts')
        

    if len(datap1)>0:
        ## +1 Order 2D Histogram
        initp1,_,_ = np.histogram2d(datap1.T[0], datap1.T[1], bins=[355,355], density=True, range=fullrange)#[[3200,13300],[2300,12200]]) #[[1700,13800],[2100,13090]]
        XYp1.imshow(initp1.T, interpolation='nearest', origin='lower', aspect='auto', cmap='magma', norm = colors.LogNorm(), extent=fullextent)#[3200,13300,2300,12200])
        XYp1.set_title('+1 Order (270°)')
        
        ## Small Projection
        n, bins, _ = Projp1.hist(datap1.T[0], 1000, range=[3200,13300], color='black', histtype='step')
        Projp1.set_xlim(3200,13300)
        
        ## Large Projection
        n, bins, _ = prjs[0].hist(datap1.T[0], 1500, range=[3200,13300], color='mediumblue', histtype='step',label='+1 Order')
        #prjs[0].set_yscale('log')
        #prjs[0].set_ylim(0,50)
        prjs[0].set_xlim(3200,13300)
        prjs[0].legend()
    
    
    if len(datan1)>0:
        ## -1 Order 2D Histogram
        initn1,_,_ = np.histogram2d(datan1.T[0], datan1.T[1], bins=[355,355], density=True, range=fullrange)#[[3450,13350],[2000,11700]]) #Steve's: [[1900,13400],[2100,12890]] #mine old: [[2000,13500],[2100,12700]]
        XYn1.imshow(initn1.T, interpolation='nearest', origin='lower',aspect='auto', cmap='magma', norm = colors.LogNorm(), extent=fullextent)#[3450,13350,2000,11700])
        XYn1.set_title('-1 Order (90°)')
        XYn1.set_ylabel('Y')
        XYn1.invert_xaxis()
        
        ## Small Projection
        n, bins, _ = Projn1.hist(datan1.T[0], 1000, range=[3450,13350], color='black', histtype='step')
        Projn1.set_xlim(3450,13350)
        Projn1.invert_xaxis()
        Projn1.set_ylabel('Projected Counts')
        
        ## Large Projection
        n, bins, _ = prjs[2].hist(datan1.T[0], 1500, range=[3450,13350], color='mediumvioletred', histtype='step',label='-1 Order')
        #prjs[2].set_yscale('log')
        #prjs[2].set_ylim(0,1000)
        prjs[2].set_xlim(3450,13350)
        prjs[2].legend()
        prjs[2].invert_xaxis()
        prjs[2].set_xlabel('X-Pixel')

    ############# --- Pulse Height Histograms --- ##############################################
    if len(data0)>0:
        n, bins, _ = PH.hist(data0.T[2], bins = np.arange(10,260,10), color = 'darkorange', histtype='step', lw=2, label='Zero Order') #max pulse height is 255
    if len(datap1)>0:
        n, bins, _ = PH.hist(datap1.T[2], bins = np.arange(10,260,10), color = 'mediumblue', histtype='step', lw=2, label='+1 Order')
    if len(datan1)>0:
        n, bins, _ = PH.hist(datan1.T[2], bins = np.arange(10,260,10), color = 'mediumvioletred', histtype='step', lw=2, label='-1 Order')
    PH.legend()
    PH.set_title('Pulse Height Histograms')
    PH.set_xlabel('Pulse Height')
    PH.set_ylabel('# of Events')
    
    ############## --- Count Rate Calculations --- ####################################################
    # Average Count Rates = num of events / total time data taken
    if len(data0)>0:
        AvgCntRt_0 = len(data0.T[0])/(Time0[-1]-Time0[0])
        text_0 = '%.1f counts/s'%(AvgCntRt_0)
    if len(datap1)>0:
        AvgCntRt_p1 = int(sum(Countsp1)/(Timep1[-1]-Timep1[0]))
        text_p1 = '%.1f counts/s'%(AvgCntRt_p1)
    if len(datan1)>0:
        AvgCntRt_n1 = int(sum(Countsn1)/(Timen1[-1]-Timen1[0]))
        text_n1 = '%.1f counts/s'%(AvgCntRt_n1)
        
    # Instantaneous Rate Plots
    #only calculate rate at every 1.5sec timestamp interval
    if len(data0)>0:
        last_calculation_time = 0
        InstRt0 = []
        T0 = []
        for o in range(len(Time0)-1):
            if Time0[o] - last_calculation_time >= 1.5:
                InstRt0.append(Counts0[o]/(Time0[o]-Time0b[o]))
                T0.append(Time0[o])
                last_calculation_time = Time0[o]
    if len(datap1)>0:
        InstRtp1 = []
        Tp1 = []
        last_calculation_time = 0
        for p in range(len(Timep1)-1):
            if Timep1[p] - last_calculation_time >= 1.5:
                InstRtp1.append(Countsp1[p]/(Timep1[p]-Timep1b[p]))
                Tp1.append(Timep1[p])
                last_calculation_time = Timep1[p]
    if len(datan1)>0:
        InstRtn1 = []
        Tn1 = []
        last_calculation_time = 0
        for n in range(len(Timen1)-1):
            if Timen1[n] - last_calculation_time >= 1.5:
                InstRtn1.append(Countsn1[n]/(Timen1[n]-Timen1b[n]))
                Tn1.append(Timen1[n])
                last_calculation_time = Timen1[n]
                
    if len(data0)>0:
        CR.plot(T0, InstRt0, lw=2, color='darkorange', label='Zero Order, %.1f counts/s'%(AvgCntRt_0))
        #n, bins, _ = CR.hist(Time0, 1, lw=2, color='darkorange', histtype='step',label='Zero Order')
    if len(datap1)>0:
        CR.plot(Tp1, InstRtp1, lw=2, color='mediumblue', label='+1 Order, %.1f counts/s'%(AvgCntRt_p1))
        #n, bins, _ = CR.hist(Timep1, 1, lw=2, color='mediumblue', histtype='step',label='+1 Order')
    if len(datan1)>0:
        CR.plot(Tn1, InstRtn1, lw=2, color='mediumvioletred', label='-1 Order, %.1f counts/s'%(AvgCntRt_n1))
        #n, bins, _ = CR.hist(Timen1, 1, lw=2, color='mediumvioletred', histtype='step',label='-1 Order')
    CR.legend()
    CR.set_ylabel('Instantaneous Rate of Events (counts/s)')
    CR.set_xlabel('Packet Time Stamp (s)')
    CR.set_title('Instantaneous Count Rate Plots')
    
    
    plt.show()
    #Zero.close()
    #Pos1.close()
    #Neg1.close()
    fig1.savefig('FORTISplots1_VIM#{}.png'.format(filenum), bbox_inches='tight',dpi=1200)
    fig2.savefig('FORTISplots2_VIM#{}.png'.format(filenum), bbox_inches='tight',dpi=1200)
    fig3.savefig('FORTISplots3_VIM#{}.png'.format(filenum), bbox_inches='tight',dpi=1200)
    print("--- %s seconds ---" % (time.time() - start_time))
                
    
    
elif prompt2 == 'no'or prompt2 == 'n':
    print('Mmkay bye')

